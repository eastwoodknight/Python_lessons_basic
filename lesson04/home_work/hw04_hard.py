# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
        
matrix_rotate = [[i[j] for i in matrix] for j in range(len(matrix[0]))]
print(matrix_rotate)

print('*' * 20)
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

#import operator
#from functools import reduce
import re

def multiply(line):
    m = int(line[0])
    for i in line[1:]:
        m *= int(i)
    return m

max_, i_max = 0, 0
i = 0
numbers =re.findall('\d', number)
while i < len(numbers[: -4]):
    m = multiply(numbers[i: i+5])
    if m > max_:
        max_, i_max = m, i 
    i += 1
    #max_, ind = m, match.start() if m > max_ else max_, ind

print(max_, i_max)
print('*' * 20)
# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

# (h, v) where h in HORISONTAL_RANGE [1 .. 8]; v in VERTICAL_RANGE [1 .. 8];
n = 8 # len
queens = [(1, 8), (5, 7), (8, 6), (6, 5), (3, 4), (7, 3), (2, 2), (4, 1)]

# check vertical horizontal
def check_vh(q):
    v, h = set(), set()
    for i in q:
        if (i[0] not in v) and (i[1] not in h):
            v.add(i[0])
            h.add(i[1])
        else:
            return False
    return True
    
 # check diagonal
def check_diagonal(queens):
    coord = set() # filled diagonal coordinates
    for q in queens:
        # check
        if q in coord:
            return False
            
        ## fill coord
        h, v = q[0], q[1]
        # left down
        for k in range(1, min([h, v]) + 1):
            coord.add((h - k, v - k))
        # right up
        for k in range(1, min([n - h, n - v]) + 1):
            coord.add((h + k, v + k))
        # left up
        for k in range(1, min([h, n - v]) + 1):
            coord.add((h - k, v + k))
        # right down
        for k in range(1, min([n - h, v]) + 1):
            coord.add((h + k, v - k))
    return True
    
if check_vh(queens) and check_diagonal(queens):
    print('NO')
else:
    print('YES')
            
    
    